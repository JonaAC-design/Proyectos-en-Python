# -*- coding: utf-8 -*-
"""jonathan_alvarado_motores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZPYxdB5-XF3asNEw3sVDi2iE5B6mspNX

En una fábrica automatizada de motores, la unidad de calidad realiza pruebas diarias de funcionamiento, de los cuales se tiene un listado de número de motores aprobados.

En el mes de septiembre la fábrica trabajó de lunes a viernes, 8 horas diarias y diariamente se producen y testean 30 motores:

Motores que pasaron la prueba aprobados=[28,29,28,27,29,30,27,25,28,29,27,25,28,30,30,27,25,22,27,25,26,28]

El Departamento de producción ha indicado que por cada motor se invierte 1000 USD, y la línea de producción se toma 15 minutos en producir cada uno.

Mensualmente la empresa paga 2000 USD en energía eléctrica para producir los motores

El Departamento de comercialización vendió cada lote de 10 motores en 15000 USD

El gerente desea obtener los siguientes reportes:

-          Total de ganancias del mes de septiembre

-          Total de productos defectuosos

-          Promedio de motores aprodados al mes

-          El porcentaje de utilidad = Precio de venta unitario - Costo unitario real de producción

-          Tiempo mensual de producción

-          Cuanto fue lo que se perdió en los productos defectuosos

Además, desea saber si la empresa esta en buena trayectoria o se va a la pérdida.

Utilice una clase Producción

Atributos:

- mes

- gasto_electricidad

- motores[]

- costo_produccion

- valor_venta

- tiempo_produccion

 

Defina cada reporte como un método de la clase
"""

import statistics

class Produccion:
  def __init__(self):
        self.mes = "Septiembre"
        self.gasto_electricidad = 2000
        self.motores=[28,29,28,27,29,30,27,25,28,29,27,25,28,30,30,27,25,22,27,25,26,28]
        self.costo_produccion = 1000
        self.tiempo_producion = 15 #minutos
        self.venta = 15000 #cada 10 motores
  
  def total_ganancia(self,venta):
    listSum = sum(self.motores)
    ganancia = listSum * self.venta
    return ganancia
   
  def productos_defectuosos(self):
    list = []
    for x in self.motores:
      a = 30 - x
      list.append(a) 
    listSum = sum(list)
    return listSum


  def perdida_defectuoso(self,venta):
    a = self.venta * self.productos_defectuosos()
    return a


  def tiempo_mensual_produccion(self,tiempo_producion):
    listSum = sum(self.motores)
    tiempo = listSum * self.tiempo_producion    
    return tiempo


      
  def promedio_aprobados(self):
            mean = statistics.mean(self.motores)
            return '{:2f}'.format(mean)

            
  def utilidad(self):
    dias = 0
    for element in self.motores:
        dias += 1
    cvu = self.venta / 10
    crp = self.costo_produccion  + (self.gasto_electricidad / dias)
    return round((cvu - crp),2)


    



obj = Produccion()
ob = Produccion()
tim = Produccion()
print("En el mes de " +str(obj.mes) + " se generó el siguiente reporte: ")
print("El promedio de produccion es: " + str(Produccion.promedio_aprobados(obj)+" motores"))
print("El tiempo de produccion es: "+str(Produccion.tiempo_mensual_produccion(obj,tim))+" minutos")
print("La ganancia total es: "+str(Produccion.total_ganancia(obj, ob))+" USD")
print("El total de productos defectuosos es: "+str(Produccion.productos_defectuosos(obj))+" motores")
print("La perdida por productos defectuosos es: "+str(Produccion.perdida_defectuoso(obj, ob))+" USD")
print("La utilidad neta es: "+str(Produccion.utilidad(obj))+" USD")